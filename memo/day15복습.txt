day15복습

1. 내부 클래스 
	클래스 내부에 선언된 클래스 
	객체화 하려면 외부클래스가 메모리에 할당되어야 가능
	내부클래스로 선언된 클래스는 외부클래스 상속받지 않아도 외부 클래스 멤버 사용 가능
	
2. 내부 클래스 종류
	인스턴스 내부클래스 class
	정적내부클래스 void
	로컬내부클래스 {} 안에서
	
3. 익명클래스 
	이름이 없는 클래스 
	미구현된 멤버 구현해서 일회성으로 객체를 생성위해 사용
	부모클래스를 상속받는 익명 자식객체
		new 부모생성자(매개변수){
	//필드, 메소드(오버라이딩)
		};

	인터페이스, 추상클래스를 구현하는 익명 구현 객체
	해당 타입의 필드, 로컬변수, 매개변수의 값으로 대입가능
		new 인터페이스(){
		//메소드 (오버라이딩)
		}

4. 람다식: 익명메소드
	함수형 프로그래밍은 함수를 정의하고 이 함수를 데이터를 처리하는 쪽으로 보내 데이터를처리하는 기법
	데이터를 처리하는 쪽에서는 데이터만 가지고있고 처리방법이 정해져있지 않아 외부에서 제공된 함수에 의존한다
	java는 함수형 프로그래밍을 위해 8부터 람다식, 스트림API을 지원하고 있고
	데이터를 처리하는 쪽에 제공되는 함수역활을 하는 매개변수를 가진 중괄호 블록을 의미한다
	데이터 처리부터는 람다식을 받아 매개변수에 데이터를 대입하고 중괄호를 실행시켜 처리한다
	
	함수형 인터페이스	
	@FunctionalInterface

	함수형 인터페이스로 추상메소드가 한 개만 선언되어있을떄 람다식으로 재정의 가능
	메소드를 하나의 식으로 표현
	
	매개변수명 -> 명령문1
	(매개변수1, 매개변수2)-> {명령문1; 명령문2; return 값;}

	람다식 문법
	- 매개변수가 하나인 경우 자료형 소괄호 생략가능
	- 매개변수가 두개 이상인 경우 소괄호 생략불가
	- 실행할 문장이 한 문장일 경우 중괄호, 세미콜론생략가능
	- 실행할 문장이 한 문장이면 return문일 경우 {} 생략시 return 생략가능,
	  {} 생략하지않으면 return작성 
	






















